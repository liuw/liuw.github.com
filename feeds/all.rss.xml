<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Liuw's Thinkpad</title><link>http://blog.liuw.name/</link><description></description><atom:link href="http://blog.liuw.name/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 05 May 2014 19:18:00 +0100</lastBuildDate><item><title>Two Years as Open Source Software Developer, Retrospect and Forward-looking</title><link>http://blog.liuw.name/two-years-as-open-source-software-developer-retrospect-and-forward-looking.html</link><description>&lt;p&gt;I've been a developer for open source
&lt;a href="http://www.xenproject.org"&gt;Xen Project&lt;/a&gt; for two years, and I also
help develop &lt;a href="http://github.com/pythoncn/june"&gt;June&lt;/a&gt; in my spare
time. What I've learned so far is that running a (proper) open source
project is never an easy task.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Open Source&lt;/em&gt; means different thing to different people. To many
people who's new to this concept, probably it just means "putting your
source code in the public so that it can be useful to others".  This
is of course a valid definition, but it's only the first stage of an
open source project. If you want your project to thrive, to have
bigger impact there's much more to do.&lt;/p&gt;
&lt;p&gt;As I understand it, a proper open source project should have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;publicly avaiable source code&lt;/li&gt;
&lt;li&gt;proper open source license&lt;/li&gt;
&lt;li&gt;proper document to certain degree&lt;/li&gt;
&lt;li&gt;public channel for discussion&lt;/li&gt;
&lt;li&gt;well-defined development process and responsive maintainers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Though I don't think Github does a great job in providing public
channel for discussion, it does provide a viable solution for #4. It
lowers the barrier to get involved in open source project. Mailing
list is also popular amongst old-school hackers.&lt;/p&gt;
&lt;p&gt;All the rest pretty much depends on project owner / initiator. #1
should be very easy to achieve. #2 and #3 are often overlooked,
however.&lt;/p&gt;
&lt;p&gt;Not having a license is very likely to turn away potential
contributors, because contributors have the right to know how their
code is going to be used and avoid potential legal problems. It might
be hard to choose one license from all those popular ones, but it's
definitely something you need to decide at the very first beginning.&lt;/p&gt;
&lt;p&gt;It's a bit tricky to define "proper document to certain degree". I
personally believe that the minimum degree of documentation should be
able to help a fresh user / developer start using / developing the
software without any major problem.&lt;/p&gt;
&lt;p&gt;The last item requires most time and effort. Many people develop open
source software to get a paycheck, but more develop for fun and
non-profit purpose. Wearing my latter hat as a developer for June, I
often feel I don't have enough time to look at all the missing
features and answer all the quesions. There's really no silver bullet,
all we can do is to devote more time.&lt;/p&gt;
&lt;p&gt;As I mention in the beginning, I develop open source software for both
profit and fun.  How good (bad) did we (the two teams) do? The
following paragraphs are by no means claiming I made any significant
contribution on the whole process. They are just my views and my views
only.&lt;/p&gt;
&lt;p&gt;I think Xen Project is doing well in general. We've got a team of
people who understand the development of open source projects. We try
hard to work with upstream / downstream projects. All development
activities happens in the public mailing list and process is
well-defined. We hold regular Xen Docsday to update documents,
etc. During the last year we've seen some siginifant improvement on
the whole development process, especially after joining the Linux
Foundation.&lt;/p&gt;
&lt;p&gt;As for June, it's not that good. I got involved in June one and a half
years ago. June has always been an open source project since its
genesis. What fell short is the last but most important item -- the
process is not very well-defined and code not very well
maintained. I'm not blaming anyone because noone gets benefit out of
it by developing June, but how can we fix / improve things? Adding new
features is important, however it's just impossible to develop all the
features by my own. And in my opinion only by building an eco-system
(however small) can we make a project healthy and prosper.&lt;/p&gt;
&lt;p&gt;When it comes to June, the core idea is that now we need to build a
minimum viable product for both end users and developers. I've tried
to identify some key steps to bootstrap and attract developers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;improve documentation&lt;/li&gt;
&lt;li&gt;develop necessary features, better test coverage&lt;/li&gt;
&lt;li&gt;request for contribution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I managed to spend some time on rewriting several documents and define
a clearer development process. As for feature parity there's still
lots of work to do. There're still lots of missing features on the
TODO list. Unfortunately up to this point the core team is really on
their own, requesting external contribution might be too early at this
stage.&lt;/p&gt;
&lt;p&gt;I'm currently working on #2 on that list, though I cannot say for sure
how much time I can put into it. At least I've got a plan and will try
to stick to it. Let's see how it plays out.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wei Liu</dc:creator><pubDate>Mon, 05 May 2014 19:18:00 +0100</pubDate><guid>tag:blog.liuw.name,2014-05-05:two-years-as-open-source-software-developer-retrospect-and-forward-looking.html</guid></item><item><title>Fix Debian Wheezy's Openswan Regression with Apple Devices</title><link>http://blog.liuw.name/fix-debian-wheezys-openswan-regression-with-apple-devices.html</link><description>&lt;p&gt;In late March Debian Security team pushed a security update to Openswan package in Wheezy. My Macbook Air cannot connect to Openswan anymore after upgrading.&lt;/p&gt;
&lt;p&gt;I searched a bit and found out that somebody already filed a bug report on Debian bug tracker: &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=744717"&gt; bug 744717 &lt;/a&gt;. There's also a report on Openswan's Github page to confirm this bug: &lt;a href="https://github.com/xelerance/Openswan/issues/78"&gt;issue 78&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Debian bug tracker a user named Liu DongMiao provided a patch and it was reported to work. I had a look at that patch but didn't quite like it, because it leaked a macro in C file, which is not a proper fix to me.&lt;/p&gt;
&lt;p&gt;The root cause of the problem is confilict in header file. Debian Security team removed ISAKMP_NEXT_NATD_BADDRAFTS. Then they had to comment out or remove some code to handle that flag, of which Apple devices make use. Unfortunately I cannot get Apple to fix their code so I have to fix mine.&lt;/p&gt;
&lt;p&gt;The fix is simplier than I thought. I compared upstream Openswan 2.6.37 with Wheezy's patched version, then restored the original flag and those code snippets. I was worried that the overriden new flag was used in code but it wasn't. I didn't touch changelog or version number of that package, so that when a new package is out it can be automatically updated when the maintainers push a new package to fix that bug.&lt;/p&gt;
&lt;p&gt;I have my &lt;a href="../files/fix-osx-baddraft-flag.patch"&gt;patch&lt;/a&gt; attached. If you want to know how to rebuild Debian package, &lt;a href="https://www.debian.org/doc/manuals/maint-guide/index.en.html"&gt;Debian New Maintainers' Guide&lt;/a&gt; is a good starting point.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wei Liu</dc:creator><pubDate>Sun, 04 May 2014 23:40:00 +0100</pubDate><guid>tag:blog.liuw.name,2014-05-04:fix-debian-wheezys-openswan-regression-with-apple-devices.html</guid></item><item><title>2012年终总结</title><link>http://blog.liuw.name/2012-year-end-review.html</link><description>&lt;p&gt;由于2012年12月31日是周一，是一个工作日，估计到时也没有时间来写blog了，所以趁着周末来写一下吧。&lt;/p&gt;
&lt;p&gt;上一个基于Wordpress的blog，由于VPS到期，大家都没打算继续在其上投资，所以下线了。之后我便萌生了改用如Pelican、Octopress、Hyde以及Jekyll这样的静态blog系统的想法。在七到九月间进行了一些尝试，但是鉴于Wordpress中使用了一些插件以及一些格式上的问题，旧文章的转换效果总是不尽如人意。而我自己又比较懒于重复造轮子，所以重新开blog的计划就一直拖到了现在。&lt;/p&gt;
&lt;p&gt;现今已经是年末，再不动手只怕这个事情要从Todo list移动到Undo list，最后到Never-do list了，所以还是快点动手吧。现在选了自己比较熟悉的Python做的Pelican，先从头开始写。旧blog中的一些文章，若是我想到比较有用或者有意思的，会手工转到Pelican中来。&lt;/p&gt;
&lt;p&gt;每个人的一年，都有不同的精彩和失落，但是最后总可以总结到一句话：如人饮水，冷暖自知。文字写多了，也不免变成流水账，乏味得让人犯困。所以鸡毛蒜皮的事情我就不写了，只记重要的事情。&lt;/p&gt;
&lt;p&gt;一到四月的时候，在剑桥实习。春节自然是没有回家，虽然有12天的假期，但是机票委实太贵，加之去年十一月末出来的时候已经在家待过一周，所以最后还是选择留下继续工作。总的来说，实习的表现还不错。当时的想法就是挑战一下自己看能不能在四个月之内把这么大的一个坑填上，可惜network I/O这个坑实在太大，写了四轮patch还是才只能说是刚刚开始，所以最后只能先把这个坑留着了。期间fix一些小bug什么的，基本不在话下。&lt;/p&gt;
&lt;p&gt;四月初，因为实验室项目的需要，回国后直接高铁回到武汉，二十多个小时没有休息。回到武汉后第二天又马上开始工作，我当时都觉得自己精力真好。项目顺利过关后，开始着手毕业工作。虽然很幸运（不幸）地被抽中到学校进行论文查重，由于论文都是自己慢慢敲的，所以顺利过关。不过文章里面说的系统没有能完全做好，代码也不见了，此为又一憾事。期间的另外一个遗憾就是曾经答应过一个华科的同学，说是回来后到华科和他们聊一聊，最后还是没能成行，最后只能和他们说一声对不起了。&lt;/p&gt;
&lt;p&gt;七月底，转战杭州，加入淘宝核心系统部。我被分到多隆的手下，接手毕玄主导的T4系统的一些开发维护工作。平时的工作不算繁重，公司大了有各种各样的限制，所以总体效率不算高。由于T4也有内核方面的改动，所以也认识了内核组的高阳和含黛，成为不错的朋友。加上参加“洗脑”培训以及技术培训，也算是认识了不少的朋友。可以说，认识的这些主管、技术大牛以及各个业务线、产品线的朋友，是我在淘宝最大的收获。技术方面的长进相对来说少一点，最大的收获就是体验到了互联网公司的技术氛围：迭代快、要落地、在优雅和速度之间取得平衡。&lt;/p&gt;
&lt;p&gt;在再三思虑之后，我还是决定趁着年轻的时候出来闯荡一下，所以最后还是离开了淘宝，接受了Platform Team的offer。这里也多得了多隆的支持，我一提出来，他很爽快地答应了。我想这就是所谓的君子之交吧，虽然他是我的上级，但是平时他总是待我如朋友一般，也很为我的个人发展着想，真的要多谢他。&lt;/p&gt;
&lt;p&gt;于是在回家休息半个月之后，又登上了来英国的飞机。有趣的是，我到达的日期只和去年差了四天。再次回来，心里早已没有初来乍到的那种忐忑。轻车熟路地入职、找房子、搬家，一切的一切，都是如此的按部就班。Platform Team甚至连我的桌子都留着给我原封不动。回来之后马上又开始挖一个新的坑，希望2013年一月的时候能填完吧。&lt;/p&gt;
&lt;p&gt;总结一下，2012是很折腾的一年，顺利毕业，走南闯北上山下海。外面的世界很精彩，我从很多不同的人身上学到了不同的东西，看了很多以前没有看过的风景；外面的世界也很无奈，我不得不面对相伴多年的两个人分道扬镳的事实。最后还是那一句话，如人饮水，冷暖自知。希望2013年里面，所有我爱的人和爱我的人，所有认识的和不认识的朋友，都能越过越好；所有知道和不知道的幸福，都能越来越多；所有了解和不了解的苦难，都会越来越少。&lt;/p&gt;
&lt;p&gt;此致&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wei Liu</dc:creator><pubDate>Fri, 28 Dec 2012 20:40:00 +0000</pubDate><guid>tag:blog.liuw.name,2012-12-28:2012-year-end-review.html</guid></item></channel></rss>