<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liuw's Thinkpad</title><link href="http://blog.liuw.name/" rel="alternate"></link><link href="http://blog.liuw.name/feeds/tech.atom.xml" rel="self"></link><id>http://blog.liuw.name/</id><updated>2014-08-29T15:03:00+01:00</updated><entry><title>Anatomy of Xen Alternative Infrastructure</title><link href="http://blog.liuw.name/anatomy-of-xen-alternative-infrastructure.html" rel="alternate"></link><updated>2014-08-29T15:03:00+01:00</updated><author><name>Wei Liu</name></author><id>tag:blog.liuw.name,2014-08-29:anatomy-of-xen-alternative-infrastructure.html</id><summary type="html">&lt;p&gt;Frankly speaking I think the name "alternative" is a bit unclear to
outsider. It's used to patch kernel raw machine code during
runtime. Why is it useful? It gives you a chance to selectively patch
machine code according to CPU features and vendors.&lt;/p&gt;
&lt;p&gt;Xen borrows a stripped down version of alternative infrastructure from
Linux kernel. It's more concise and easier to understand, because Xen
applies alternative instructions before SMP initialisation and it
doesn't support altering instructions after everything else is up and
running. The implementation in Linux is more complex as it has more
functionalities. The core principle remains the same in Xen, however.&lt;/p&gt;
&lt;p&gt;This infrastructure is only used in x86 architecture at the moment so
files are placed under x86 folders. There are only two files,
xen/arch/x86/alternative.c and xen/include/asm-x86/alternative.h.&lt;/p&gt;
&lt;p&gt;Let's look at the header file first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;alt_instr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;s32&lt;/span&gt; &lt;span class="n"&gt;instr_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* original instruction */&lt;/span&gt;
    &lt;span class="n"&gt;s32&lt;/span&gt; &lt;span class="n"&gt;repl_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* offset to replacement instruction */&lt;/span&gt;
    &lt;span class="n"&gt;u16&lt;/span&gt; &lt;span class="n"&gt;cpuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;/* cpuid bit set for replacement */&lt;/span&gt;
    &lt;span class="n"&gt;u8&lt;/span&gt;  &lt;span class="n"&gt;instrlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* length of original instruction */&lt;/span&gt;
    &lt;span class="n"&gt;u8&lt;/span&gt;  &lt;span class="n"&gt;replacementlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* length of new instruction, &amp;lt;= instrlen */&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cp"&gt;#define OLDINSTR(oldinstr)      &amp;quot;661:\n\t&amp;quot; oldinstr &amp;quot;\n662:\n&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define b_replacement(number)   &amp;quot;663&amp;quot;#number&lt;/span&gt;
&lt;span class="cp"&gt;#define e_replacement(number)   &amp;quot;664&amp;quot;#number&lt;/span&gt;

&lt;span class="cp"&gt;#define alt_slen &amp;quot;662b-661b&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define alt_rlen(number) e_replacement(number)&amp;quot;f-&amp;quot;b_replacement(number)&amp;quot;f&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define ALTINSTR_ENTRY(feature, number)                                       \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; .long 661b - .\n&amp;quot;                             &lt;/span&gt;&lt;span class="cm"&gt;/* label           */&lt;/span&gt;&lt;span class="cp"&gt; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; .long &amp;quot; b_replacement(number)&amp;quot;f - .\n&amp;quot;        &lt;/span&gt;&lt;span class="cm"&gt;/* new instruction */&lt;/span&gt;&lt;span class="cp"&gt; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; .word &amp;quot; __stringify(feature) &amp;quot;\n&amp;quot;             &lt;/span&gt;&lt;span class="cm"&gt;/* feature bit     */&lt;/span&gt;&lt;span class="cp"&gt; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; .byte &amp;quot; alt_slen &amp;quot;\n&amp;quot;                         &lt;/span&gt;&lt;span class="cm"&gt;/* source len      */&lt;/span&gt;&lt;span class="cp"&gt; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; .byte &amp;quot; alt_rlen(number) &amp;quot;\n&amp;quot;                 &lt;/span&gt;&lt;span class="cm"&gt;/* replacement len */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define DISCARD_ENTRY(number)                           &lt;/span&gt;&lt;span class="cm"&gt;/* rlen &amp;lt;= slen */&lt;/span&gt;&lt;span class="cp"&gt;    \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; .byte 0xff + (&amp;quot; alt_rlen(number) &amp;quot;) - (&amp;quot; alt_slen &amp;quot;)\n&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define ALTINSTR_REPLACEMENT(newinstr, feature, number) &lt;/span&gt;&lt;span class="cm"&gt;/* replacement */&lt;/span&gt;&lt;span class="cp"&gt;     \&lt;/span&gt;
&lt;span class="cp"&gt;        b_replacement(number)&amp;quot;:\n\t&amp;quot; newinstr &amp;quot;\n&amp;quot; e_replacement(number) &amp;quot;:\n\t&amp;quot;&lt;/span&gt;

&lt;span class="cm"&gt;/* alternative assembly primitive: */&lt;/span&gt;
&lt;span class="cp"&gt;#define ALTERNATIVE(oldinstr, newinstr, feature)                        \&lt;/span&gt;
&lt;span class="cp"&gt;        OLDINSTR(oldinstr)                                              \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;.pushsection .altinstructions,\&amp;quot;a\&amp;quot;\n&amp;quot;                         \&lt;/span&gt;
&lt;span class="cp"&gt;        ALTINSTR_ENTRY(feature, 1)                                      \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;.popsection\n&amp;quot;                                                 \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;.pushsection .discard,\&amp;quot;aw\&amp;quot;,@progbits\n&amp;quot;                      \&lt;/span&gt;
&lt;span class="cp"&gt;        DISCARD_ENTRY(1)                                                \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;.popsection\n&amp;quot;                                                 \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;.pushsection .altinstr_replacement, \&amp;quot;ax\&amp;quot;\n&amp;quot;                  \&lt;/span&gt;
&lt;span class="cp"&gt;        ALTINSTR_REPLACEMENT(newinstr, feature, 1)                      \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;.popsection&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ALTINSTR_ENTRY is the equivelant of struct alt_instr in assembly.&lt;/p&gt;
&lt;p&gt;For example, stac and clac are defined using alternative mechanism.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;always_inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;clac&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Note: a barrier is implicit in alternative() */&lt;/span&gt;
    &lt;span class="n"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASM_NOP3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;___stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ASM_CLAC&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;X86_FEATURE_SMAP&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;alternative&lt;/em&gt; is a wrapper of ALTERNATIVE. So in effect this inline
function defines 3 NOPs first, because machine code of clac is 3 bytes
long. Then an alternative instruction entry is created in
.altinstructions section. A discard entry created in .discard
section. Finally the alternative instructions used to replace the
original ones are stored in .altinstr_replacement section.&lt;/p&gt;
&lt;p&gt;To extend this snippet into assembly code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="nf"&gt;volatile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALTERNATIVE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASM_NOP3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ASM_CLAC&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;X86_FEATURE_SMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;661:&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;ASM_NOP3&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;662:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;.pushsection .altinstructions,&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                         \
    &lt;span class="s"&gt;&amp;quot; .long 661b - .&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                             &lt;span class="cm"&gt;/* label           */&lt;/span&gt; \
    &lt;span class="s"&gt;&amp;quot; .long 6631f - .&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;        &lt;span class="cm"&gt;/* new instruction */&lt;/span&gt; \
    &lt;span class="s"&gt;&amp;quot; .word &amp;quot;&lt;/span&gt; &lt;span class="n"&gt;__stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X86_FEATURE_SMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;             &lt;span class="cm"&gt;/* feature bit     */&lt;/span&gt; \
    &lt;span class="s"&gt;&amp;quot; .byte 662b - 661b&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                         &lt;span class="cm"&gt;/* source len      */&lt;/span&gt; \
    &lt;span class="s"&gt;&amp;quot; .byte 6641f - 6631f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                 &lt;span class="cm"&gt;/* replacement len */&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;.popsection&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                                                 \

    &lt;span class="s"&gt;&amp;quot;.pushsection .discard,&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;aw&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,@progbits&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                      \
    &lt;span class="s"&gt;&amp;quot; .byte 0xff + (6641f - 6631f) - (662b - 661b)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;.popsection&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                                                 \

    &lt;span class="s"&gt;&amp;quot;.pushsection .altinstr_replacement, &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;ax&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;                  \
    &lt;span class="s"&gt;&amp;quot;6631:&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;__stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ASM_CLAC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;6641:&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;   
    &lt;span class="s"&gt;&amp;quot;.popsection&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When Xen boots up, it iterates through .altinstructions sections,
picks up each entry and patches call sites if the required feature bit
is met. See alternative.c:apply_alternatives. If the required feature
is not available, those instructions remain NOPs.&lt;/p&gt;
&lt;p&gt;If you inspect the object file that contains functions that are
implemented with alternative mechanism (for example, usercopy.c calls
stac and clac), you can see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;objdump&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;xen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usercopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;
&lt;span class="n"&gt;xen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usercopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;elf64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;

&lt;span class="nl"&gt;Sections:&lt;/span&gt;
&lt;span class="n"&gt;Idx&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;          &lt;span class="n"&gt;Size&lt;/span&gt;      &lt;span class="n"&gt;VMA&lt;/span&gt;               &lt;span class="n"&gt;LMA&lt;/span&gt;               &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;  &lt;span class="n"&gt;Algn&lt;/span&gt;
 &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;         &lt;span class="mf"&gt;000001e9&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;00000040&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
                 &lt;span class="n"&gt;CONTENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RELOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;READONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CODE&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;         &lt;span class="mo"&gt;00000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000022&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
                 &lt;span class="n"&gt;CONTENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bss&lt;/span&gt;          &lt;span class="mo"&gt;00000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000022&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
                 &lt;span class="n"&gt;ALLOC&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;altinstructions&lt;/span&gt; &lt;span class="mo"&gt;0000004&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000022&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
                 &lt;span class="n"&gt;CONTENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RELOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;READONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discard&lt;/span&gt;      &lt;span class="mo"&gt;00000006&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;00000274&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
                 &lt;span class="n"&gt;CONTENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;altinstr_replacement&lt;/span&gt; &lt;span class="mo"&gt;00000012&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000000000000000&lt;/span&gt;  &lt;span class="mo"&gt;0000027&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
                 &lt;span class="n"&gt;CONTENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;READONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CODE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disassembling .altinstr_replacement section yields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;objdump&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;altinstr_replacement&lt;/span&gt; &lt;span class="n"&gt;xen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usercopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;

&lt;span class="n"&gt;xen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usercopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;elf64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;

&lt;span class="n"&gt;Disassembly&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;altinstr_replacement&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="mo"&gt;0000000000000000&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;altinstr_replacement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;
   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mf"&gt;0f&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;cb&lt;/span&gt;                      &lt;span class="n"&gt;lret&lt;/span&gt;
   &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mf"&gt;0f&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;ca&lt;/span&gt; &lt;span class="mf"&gt;0f&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;                &lt;span class="n"&gt;lret&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mh"&gt;0x10f&lt;/span&gt;
   &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;cb&lt;/span&gt;                      &lt;span class="n"&gt;lret&lt;/span&gt;
   &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mf"&gt;0f&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nl"&gt;b:&lt;/span&gt;   &lt;span class="n"&gt;ca&lt;/span&gt; &lt;span class="mf"&gt;0f&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;                &lt;span class="n"&gt;lret&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mh"&gt;0x10f&lt;/span&gt;
   &lt;span class="nl"&gt;e:&lt;/span&gt;   &lt;span class="n"&gt;cb&lt;/span&gt;                      &lt;span class="n"&gt;lret&lt;/span&gt;
   &lt;span class="nl"&gt;f:&lt;/span&gt;   &lt;span class="mf"&gt;0f&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;ca&lt;/span&gt;                      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="mh"&gt;0xca&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;0f 01 ca and 0f 01 cb are machine code for clac and stac.&lt;/p&gt;
&lt;p&gt;Use gdb to look at call site of stac:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;gdb&lt;/span&gt; &lt;span class="nx"&gt;xen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;usercopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;disas&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;__copy_from_user_ll&lt;/span&gt;
&lt;span class="nx"&gt;Dump&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;assembler&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;__copy_from_user_ll&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="mh"&gt;0x000000000000003c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;  &lt;span class="nx"&gt;push&lt;/span&gt;   &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rbp&lt;/span&gt;
   &lt;span class="mh"&gt;0x000000000000003d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="nx"&gt;e5&lt;/span&gt;    &lt;span class="nx"&gt;mov&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rbp&lt;/span&gt;
   &lt;span class="mh"&gt;0x0000000000000040&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="nx"&gt;d1&lt;/span&gt;   &lt;span class="nx"&gt;mov&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ecx&lt;/span&gt;
   &lt;span class="mh"&gt;0x0000000000000042&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;    &lt;span class="nx"&gt;data32&lt;/span&gt; &lt;span class="nx"&gt;xchg&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ax&lt;/span&gt;
   &lt;span class="mh"&gt;0x0000000000000045&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="nx"&gt;c8&lt;/span&gt;    &lt;span class="nx"&gt;mov&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rcx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rax&lt;/span&gt;
   &lt;span class="mh"&gt;0x0000000000000048&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;    &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt; &lt;span class="nx"&gt;f9&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;cmp&lt;/span&gt;    &lt;span class="nx"&gt;$0xf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rcx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The line 66 66 90 is in fact ASM_NOP3 if you look at its definition.&lt;/p&gt;
&lt;p&gt;If the requested feature is not present, ASM_NOP3 remains
untouched. Otherwise it's replaced with 0f 01 cb.&lt;/p&gt;
&lt;p&gt;The patching procedure can be seen in alternative.c. It's quite
straightforward -- just plain memcpy.&lt;/p&gt;
&lt;p&gt;This is it. This post mainly targets beginners who are interested in
tricks in low level programming. It does requires certain level of
understanding of the tools though. Fortunately the manuals of those
tools are excellent so I won't go into details on how to use those
tools.&lt;/p&gt;</summary></entry><entry><title>Two Years as Open Source Software Developer, Retrospect and Forward-looking</title><link href="http://blog.liuw.name/two-years-as-open-source-software-developer-retrospect-and-forward-looking.html" rel="alternate"></link><updated>2014-05-05T19:18:00+01:00</updated><author><name>Wei Liu</name></author><id>tag:blog.liuw.name,2014-05-05:two-years-as-open-source-software-developer-retrospect-and-forward-looking.html</id><summary type="html">&lt;p&gt;I've been a developer for open source
&lt;a href="http://www.xenproject.org"&gt;Xen Project&lt;/a&gt; for two years, and I also
help develop &lt;a href="http://github.com/pythoncn/june"&gt;June&lt;/a&gt; in my spare
time. What I've learned so far is that running a (proper) open source
project is never an easy task.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Open Source&lt;/em&gt; means different thing to different people. To many
people who's new to this concept, probably it just means "putting your
source code in the public so that it can be useful to others".  This
is of course a valid definition, but it's only the first stage of an
open source project. If you want your project to thrive, to have
bigger impact there's much more to do.&lt;/p&gt;
&lt;p&gt;As I understand it, a proper open source project should have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;publicly avaiable source code&lt;/li&gt;
&lt;li&gt;proper open source license&lt;/li&gt;
&lt;li&gt;proper document to certain degree&lt;/li&gt;
&lt;li&gt;public channel for discussion&lt;/li&gt;
&lt;li&gt;well-defined development process and responsive maintainers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Though I don't think Github does a great job in providing public
channel for discussion, it does provide a viable solution for #4. It
lowers the barrier to get involved in open source project. Mailing
list is also popular amongst old-school hackers.&lt;/p&gt;
&lt;p&gt;All the rest pretty much depends on project owner / initiator. #1
should be very easy to achieve. #2 and #3 are often overlooked,
however.&lt;/p&gt;
&lt;p&gt;Not having a license is very likely to turn away potential
contributors, because contributors have the right to know how their
code is going to be used and avoid potential legal problems. It might
be hard to choose one license from all those popular ones, but it's
definitely something you need to decide at the very first beginning.&lt;/p&gt;
&lt;p&gt;It's a bit tricky to define "proper document to certain degree". I
personally believe that the minimum degree of documentation should be
able to help a fresh user / developer start using / developing the
software without any major problem.&lt;/p&gt;
&lt;p&gt;The last item requires most time and effort. Many people develop open
source software to get a paycheck, but more develop for fun and
non-profit purpose. Wearing my latter hat as a developer for June, I
often feel I don't have enough time to look at all the missing
features and answer all the quesions. There's really no silver bullet,
all we can do is to devote more time.&lt;/p&gt;
&lt;p&gt;As I mention in the beginning, I develop open source software for both
profit and fun.  How good (bad) did we (the two teams) do? The
following paragraphs are by no means claiming I made any significant
contribution on the whole process. They are just my views and my views
only.&lt;/p&gt;
&lt;p&gt;I think Xen Project is doing well in general. We've got a team of
people who understand the development of open source projects. We try
hard to work with upstream / downstream projects. All development
activities happens in the public mailing list and process is
well-defined. We hold regular Xen Docsday to update documents,
etc. During the last year we've seen some siginifant improvement on
the whole development process, especially after joining the Linux
Foundation.&lt;/p&gt;
&lt;p&gt;As for June, it's not that good. I got involved in June one and a half
years ago. June has always been an open source project since its
genesis. What fell short is the last but most important item -- the
process is not very well-defined and code not very well
maintained. I'm not blaming anyone because noone gets benefit out of
it by developing June, but how can we fix / improve things? Adding new
features is important, however it's just impossible to develop all the
features by my own. And in my opinion only by building an eco-system
(however small) can we make a project healthy and prosper.&lt;/p&gt;
&lt;p&gt;When it comes to June, the core idea is that now we need to build a
minimum viable product for both end users and developers. I've tried
to identify some key steps to bootstrap and attract developers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;improve documentation&lt;/li&gt;
&lt;li&gt;develop necessary features, better test coverage&lt;/li&gt;
&lt;li&gt;request for contribution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I managed to spend some time on rewriting several documents and define
a clearer development process. As for feature parity there's still
lots of work to do. There're still lots of missing features on the
TODO list. Unfortunately up to this point the core team is really on
their own, requesting external contribution might be too early at this
stage.&lt;/p&gt;
&lt;p&gt;I'm currently working on #2 on that list, though I cannot say for sure
how much time I can put into it. At least I've got a plan and will try
to stick to it. Let's see how it plays out.&lt;/p&gt;</summary></entry><entry><title>Fix Debian Wheezy's Openswan Regression with Apple Devices</title><link href="http://blog.liuw.name/fix-debian-wheezys-openswan-regression-with-apple-devices.html" rel="alternate"></link><updated>2014-05-04T23:40:00+01:00</updated><author><name>Wei Liu</name></author><id>tag:blog.liuw.name,2014-05-04:fix-debian-wheezys-openswan-regression-with-apple-devices.html</id><summary type="html">&lt;p&gt;In late March Debian Security team pushed a security update to Openswan package in Wheezy. My Macbook Air cannot connect to Openswan anymore after upgrading.&lt;/p&gt;
&lt;p&gt;I searched a bit and found out that somebody already filed a bug report on Debian bug tracker: &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=744717"&gt; bug 744717 &lt;/a&gt;. There's also a report on Openswan's Github page to confirm this bug: &lt;a href="https://github.com/xelerance/Openswan/issues/78"&gt;issue 78&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Debian bug tracker a user named Liu DongMiao provided a patch and it was reported to work. I had a look at that patch but didn't quite like it, because it leaked a macro in C file, which is not a proper fix to me.&lt;/p&gt;
&lt;p&gt;The root cause of the problem is confilict in header file. Debian Security team removed ISAKMP_NEXT_NATD_BADDRAFTS. Then they had to comment out or remove some code to handle that flag, of which Apple devices make use. Unfortunately I cannot get Apple to fix their code so I have to fix mine.&lt;/p&gt;
&lt;p&gt;The fix is simplier than I thought. I compared upstream Openswan 2.6.37 with Wheezy's patched version, then restored the original flag and those code snippets. I was worried that the overriden new flag was used in code but it wasn't. I didn't touch changelog or version number of that package, so that when a new package is out it can be automatically updated when the maintainers push a new package to fix that bug.&lt;/p&gt;
&lt;p&gt;I have my &lt;a href="../files/fix-osx-baddraft-flag.patch"&gt;patch&lt;/a&gt; attached. If you want to know how to rebuild Debian package, &lt;a href="https://www.debian.org/doc/manuals/maint-guide/index.en.html"&gt;Debian New Maintainers' Guide&lt;/a&gt; is a good starting point.&lt;/p&gt;</summary></entry></feed>